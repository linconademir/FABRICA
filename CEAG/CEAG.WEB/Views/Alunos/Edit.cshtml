@model CEAG.WEB.ViewModel.Aluno.AlunoViewModel

@{
    ViewBag.Title = "Editar Aluno";
}

<div class="containerLopus">
    <div>
        <img src="" />
        @if (Model.Sexo.ToUpper() == "MASCULINO")
        {
            <h3>
                <img alt="Brand" height="100" width="100" src="~/Images/Browser/student-male-big.png" /> EDITAR CADASTRO DO ALUNO <b>@Model.Nome </b>
                <button type="button" class="btn btn-primary" onclick="location.href='@Url.Action("Create", "PontoAtencaos",new { tipoPontoAtencao = "ALUNO"})'">
                    <img alt="Brand" height="50" width="50" src="~/Images/Browser/spam.png" title='Adicionar um ponto de atenção.' />
                </button>
            </h3>

        }
        else
        {
            <h3>
                <img alt="Brand" height="100" width="100" src="~/Images/Browser/student-female-big.png" /> EDITAR CADASTRO DA ALUNA <b>@Model.Nome </b>
                <button type="button" class="btn btn-primary" onclick="location.href='@Url.Action("Create", "PontoAtencaos",new { tipoPontoAtencao = "ALUNA"})'">
                    <img alt="Brand" height="50" width="50" src="~/Images/Browser/spam.png" title='Adicionar um ponto de atenção.' />
                </button>
            </h3>
        }

    </div>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.CodEscola)
        @Html.HiddenFor(model => model.CodAluno)
        @Html.HiddenFor(model => model.Inclusao)
        @Html.HiddenFor(model => model.CodTelefone)
        @Html.HiddenFor(model => model.InclusaoTelefone)
        @Html.HiddenFor(model => model.CodLogradouro)

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <fieldset>
                <legend>DADOS DO ALUNO</legend>
                <div class="form-group">
                    @Html.LabelFor(model => model.Matricula, htmlAttributes: new { @class = "control-label col-md-2 col-lg-2" })
                    <div class="col-md-2 col-lg-2">
                        @Html.EditorFor(model => model.Matricula, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                    @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-1 col-lg-1" })
                    <div class="col-md-2 col-lg-4">
                        @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @placeholder = "Digite o nome do aluno", id = "nomeAluno" } })
                        @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Sexo, htmlAttributes: new { @class = "control-label col-md-1 col-lg-1" })
                    <div class="col-md-2 col-lg-2">
                        @Html.DropDownListFor(model => model.Sexo, (SelectList)ViewBag.DropdownSexo, new { @class = "form-control", data_live_search = "true", id = "ddlSexo" })
                        @Html.ValidationMessageFor(model => model.Sexo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Cpf, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.Cpf, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", placeholder = "000.000.000-00", id = "cpf" } })
                        @Html.ValidationMessageFor(model => model.Cpf, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Rg, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.Rg, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.Rg, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.RgOrgaoEmissor, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.RgOrgaoEmissor, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.RgOrgaoEmissor, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.RgUf, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-1">
                        @Html.DropDownListFor(model => model.RgUf, (SelectList)ViewBag.DropdownUf, new { @class = "form-control", data_live_search = "true", id = "ddlRgUf" })
                        @Html.ValidationMessageFor(model => model.RgUf, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Naturalidade, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Naturalidade, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.Naturalidade, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Nacionalidade, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.Nacionalidade, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.Nacionalidade, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Nascimento, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.Nascimento, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.Nascimento, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @placeholder = "Digite o E-mail do aluno" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.MaeNome, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.MaeNome, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @placeholder = "Digite o nome da mãe do aluno" } })
                        @Html.ValidationMessageFor(model => model.MaeNome, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.MaeProfissao, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.MaeProfissao, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @placeholder = "Profissão da mãe do aluno" } })
                        @Html.ValidationMessageFor(model => model.MaeProfissao, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PaiNome, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.PaiNome, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @placeholder = "Digite o nome do pai do aluno" } })
                        @Html.ValidationMessageFor(model => model.PaiNome, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.PaiProfissao, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.PaiProfissao, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @placeholder = "Profissão do pai do aluno" } })
                        @Html.ValidationMessageFor(model => model.PaiProfissao, "", new { @class = "text-danger" })
                    </div>
                </div>
            </fieldset>
            <fieldset>
                <legend>ENDEREÇO</legend>
                <div class="form-group">
                    @Html.LabelFor(model => model.Cep, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.Cep, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @placeholder = "CEP", id = "cep" } })
                        @Html.ValidationMessageFor(model => model.Cep, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Rua, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.Rua, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", autocomplete = "off", @placeholder = "Rua", id = "rua" } })
                        @Html.ValidationMessageFor(model => model.Rua, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Numero, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-1">
                        @Html.EditorFor(model => model.Numero, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.Numero, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Complemento, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.Complemento, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @placeholder = "Complemento" } })
                        @Html.ValidationMessageFor(model => model.Complemento, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Referencia, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.Referencia, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @placeholder = "Ponto de referência" } })
                        @Html.ValidationMessageFor(model => model.Referencia, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Bairro, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.Bairro, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", autocomplete = "off", @placeholder = "Bairro", id = "bairro" } })
                        @Html.ValidationMessageFor(model => model.Bairro, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Municipio, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Municipio, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", autocomplete = "off", @placeholder = "Municipio", id = "cidade" } })
                        @Html.ValidationMessageFor(model => model.Municipio, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Uf, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-1">
                        @Html.DropDownListFor(model => model.Uf, (SelectList)ViewBag.DropdownUf, new { @class = "form-control", @readonly = "readonly", data_live_search = "true", id = "uf" })
                        @Html.ValidationMessageFor(model => model.Uf, "", new { @class = "text-danger" })
                    </div>
                </div>
            </fieldset>
            <fieldset>
                <legend>TELEFONE</legend>
                <div class="form-group">
                    @Html.LabelFor(model => model.TipoTelefone, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-1">
                        @Html.DropDownListFor(model => model.TipoTelefone, (SelectList)ViewBag.DropdownTipoTelefone, new { @class = "form-control", data_live_search = "true", id = "ddlTipoTeleofone" })
                        @Html.ValidationMessageFor(model => model.TipoTelefone, "", new { @class = "text-danger" })
                    </div>

                    @Html.LabelFor(model => model.LocalTelefone, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-1">
                        @Html.DropDownListFor(model => model.LocalTelefone, (SelectList)ViewBag.DropdownLocalTelefone, new { @class = "form-control", data_live_search = "true", id = "ddlLocalTelefone" })
                        @Html.ValidationMessageFor(model => model.LocalTelefone, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Ddd, htmlAttributes: new { @class = "control-label col-md-1" })
                    <div class="col-md-1">
                        @Html.EditorFor(model => model.Ddd, new { htmlAttributes = new { @class = "form-control", id = "ddd" } })
                        @Html.ValidationMessageFor(model => model.Ddd, "", new { @class = "text-danger" })
                    </div>

                    @Html.LabelFor(model => model.NumeroTelefone, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.NumeroTelefone, new { htmlAttributes = new { @class = "form-control", id = "fone" } })
                        @Html.ValidationMessageFor(model => model.NumeroTelefone, "", new { @class = "text-danger" })
                    </div>
                </div>

            </fieldset>

            <div class="form-group">
                <div class="col-md-offset-5 col-si-offset-5 col-md-10">
                    <button type="submit">
                        <img src="~/images/Browser/ok.png" width="50" height="50" data-toggle="modal" data-target="#modal-mensagem" />
                    </button>
                    <button type="button" onclick="location.href='@Url.Action("Index", "Alunos")'">
                        <img src="~/images/Browser/cancel.png" width="50" height="50" />
                    </button>

                </div>
            </div>
        </div>
    }
</div>

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/inputmask")
    <script type="text/javascript">
        $(document).ready(function () {
            $("#ddd").inputmask("mask", { "mask": "(99)" });
            $("#fone").inputmask("mask", { "mask": "9999-9999" });
            $("#cpf").inputmask("mask", { "mask": "999.999.999-99" }, { reverse: true });
            $("#cep").inputmask("mask", { "mask": "99999-999" });
            $("#preco").inputmask("mask", { "mask": "999.999,99" }, { reverse: true });
            $("#valor").inputmask("mask", { "mask": "#.##9,99" }, { reverse: true });
        });

        $(document).ready(function () {

            function limpaFormulárioCep() {
                // Limpa valores do formulário de cep.
                $("#rua").val("");
                $("#bairro").val("");
                $("#cidade").val("");
                $("#uf").val("");
                //$("#ibge").val("");
            }

            //Quando o campo cep perde o foco.
            $("#cep").blur(function () {

                //Nova variável "cep" somente com dígitos.
                var cep = $(this).val().replace(/\D/g, '');

                //Verifica se campo cep possui valor informado.
                if (cep != "") {

                    //Expressão regular para validar o CEP.
                    var validacep = /^[0-9]{8}$/;

                    //Valida o formato do CEP.
                    if (validacep.test(cep)) {

                        //Preenche os campos com "..." enquanto consulta webservice.
                        $("#rua").val("...")
                        $("#bairro").val("...")
                        $("#cidade").val("...")
                            / $("#uf").val("...")
                        // $("#ibge").val("...")

                        //Consulta o webservice viacep.com.br/
                        $.getJSON("//viacep.com.br/ws/" + cep + "/json/?callback=?", function (dados) {

                            if (!("erro" in dados)) {
                                //Atualiza os campos com os valores da consulta.
                                $("#rua").val(dados.logradouro);
                                $("#bairro").val(dados.bairro);
                                $("#cidade").val(dados.localidade);
                                $("#uf").val(dados.uf);
                                //  $("#ibge").val(dados.ibge);
                            } //end if.
                            else {
                                //CEP pesquisado não foi encontrado.
                                limpaFormulárioCep();
                                alert("CEP não encontrado.");
                            }
                        });
                    } //end if.
                    else {
                        //cep é inválido.
                        limpaFormulárioCep();
                        alert("Formato de CEP inválido.");
                    }
                } //end if.
                else {
                    //cep sem valor, limpa formulário.
                    limpaFormulárioCep();
                }
            });
        });

                        //$(document).ready(function () {
                        //    $("#cpf").blur(function () {
                        //        var cpf = $('#cpf').val();
                        //        $.ajax({
                        //            dataType: "json",
                        //            type: "GET",
                        //            url: "/Alunos/ObterPorCpf?cpf=" + cpf,
                        //            success: function (dados) {
                        //                if (dados != null) {
                        //                    alert('O CPF digitado já existe no cadastro, tente outro.');
                        //                    document.getElementById("cpf").focus();
                        //                }
                        //            },
                        //            error: function (error) {
                        //                alert('CPF LIBERADO PARA CADASTRO.'); //exibe janela de texto
                        //            }
                        //        });
                        //    });
                        //});
    </script>



}